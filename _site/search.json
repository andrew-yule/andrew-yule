[
  {
    "objectID": "posts/2021-06-25 When to hang up the cards/index.html",
    "href": "posts/2021-06-25 When to hang up the cards/index.html",
    "title": "When To Hang Up The Cards",
    "section": "",
    "text": "When To Hang Up The Cards\n\n\n\n\n\n This week’s riddler was too interesting to pass up:\n\n\n\n\n\n Riddler solitaire is played with 11 cards: an ace, a two, a three, a four, a five, a six, a seven, an eight, a nine, a 10 and a joker. Each card is worth its face value in points, while the ace counts for 1 point. To play a game, you shuffle the cards so they are randomly ordered, and then turn them over one by one. You start with 0 points, and as you flip over each card your score increases by that card’s points — as long as the joker hasn’t shown up. The moment the joker appears, the game is over and your score is 0. The key is that you can stop any moment and walk away with a nonzero score.What strategy maximizes your expected number of points?\n\n\n\n\n\n As always, I like to solve these kinds of problems using simulation because it shows just how powerful computational approaches can be.Let’s start first by creating the deck of cards and then we’ll run a bunch of “simulations” by taking a random order of the cards many times.\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n Next, let’s create a helper function to count of score for the given hand assuming we were to stop at anywhere from 1 - 11, noting however, that if we hit a “J” in one of our hands, we will then get a 0 score for that hand and number of cards combination.\n\n\n\n\n\n \n\n\n\n Next, apply our helper function to the simulations and merge the results for the various number of cards dealt taking the average score.\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n We know this is an optimization function of some kind so we should be able to see some kind of global maximum in our results.\n\n\n\n\n\n \n\n\n\n \n\n\n\n And finally, let’s determine which hand is the optimal one to call it quits for which for this game is at 5 hands with an average likely score somewhere around 15."
  },
  {
    "objectID": "posts/2021-06-03 Riddler perfect game/index.html",
    "href": "posts/2021-06-03 Riddler perfect game/index.html",
    "title": "On-Base Percentage For a Certain Number of Perfect Games",
    "section": "",
    "text": "On-Base Percentage For a Certain Number of Perfect Games\n\n\n\n\n\n I always enjoy reading the weekly Riddler puzzles from 538 (link). My background is not in statistics, but I enjoy the puzzles because they’re typically just the right amount of complexity to solve in a reasonable time frame and the topics are interesting and wide-ranging. When there is one involving sports, it’s even better.Here’s the Riddler express from June 3rd 2021 discussing baseball perfect games:\n\n\n\n\n\n How low would a batter’s chances of reaching base have to be for you to expect one perfect game per season? (You can make the following simplifying assumptions: All batters have the same chances of reaching base; at-bats are independent from each other; there are 30 MLB teams, and each club plays 162 games; and no games go into extra innings.)\n\n\n\n\n\n My preferred computational tool is the Wolfram Language so I’ll take a stab at solving this Riddler using it. \n\n\n\n\n\n First, let’s define some global constants based on what we are allowed to assume.\n\n\n\n\n\n \n\n\n\n Now, my preferred approach to a lot of these statistically based Riddler’s is to just simulate them. The primary reason is because I have very little actual formal training in statistics, but also because I believe that modern computers today combined with powerful computation languages, give us a very good way of solving these problems that previously had to be solved using pure mathematics.So, we need a way of simulating a baseball season and to start we will need to create a distribution based on the on-base average. In this case, we can use EmpiricalDistribution and assign a weight based on the on-base average. The resulting output will be either a 1 when the batter gets on base, or a 0 when they do not. \n\n\n\n\n\n \n\n\n\n Simulating a full season requires us to randomly sample our on-base distribution for the total number of at bats that we can expect for every game played across each team. Then, to ensure we account for randomness correctly, because this is a simulation, we need to repeat this process a number of times. The more we perform a simulation, averaging the results, the better our prediction will be.RandomVariate lets us sample our distribution a number of times and create nested arrays. In this case we simulate the number of at bats in a game for each team across an entire season 100 times. Then for each simulation we count the number of perfect games we have and take an average across the full number of season simulations.\n\n\n\n\n\n \n\n\n\n \n\n\n\n Simulating each season multiple times for various on-base averages let’s us see how the number of predicted perfect games in a season varies.\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n And finally, using the results we can calculate the required on-base average that would lead to one perfect game per season"
  },
  {
    "objectID": "posts/2018-10-12 Heat Maps/index.html",
    "href": "posts/2018-10-12 Heat Maps/index.html",
    "title": "Improving Operations Through Visualization",
    "section": "",
    "text": "Improving Operations Through Visualization\n\n\n\n\n\n How do you understand thermal-hydraulic behavior in large pipeline networks?\n\n\n\n\n\n This was the exact question I asked myself during some of the recent work we kicked off to look at an onshore midstream hydrocarbon distribution network.Spending the majority of my time working on offshore fields, the technical challenges are obviously there, but the infrastructures you work with are generally pretty simple. A few wells tying into a manifold, followed by a single subsea tieback to a host facility is a typical scenario. Under those conditions, things like temperature and pressure can easily be visualized through profile plots of a particular pipeline like the one below.Compare that to onshore networks, and in particular, midstream companies operating networks, where you can end up with 100’s of pipelines with numerous “sources” or feeds joining the system, and “sinks” or feeds leaving the system. Answering very specific questions about that network can be done, but getting an understanding of the entire system under certain scenarios is difficult.\n\n\n\n\n\n Visualization to the rescue!\n\n\n\n\n\n One of the best ways to understand data is to be able to visualize it. When that data is in the context of a geographical layout, then what I have come to realize is that the best approach to visualization should be something that embraces that geographical dependency. Enter heat maps.In the above examples, you can see a few of the visualizations created for some onshore pipeline networks looking at things like temperatures and pressures through a field. In most cases, the coloring of the lines allows for very clear picture of where in the system higher values are located. This helps to understand e.g. where bottlenecks might be which could be caused by insufficiently size pipes or excess flow that needs to be diverted.\n\n\n\n\n\n General workflow\n\n\n\n\n\n So what’s required to make one of these? Well the fundamental process is actually fairly easy to understand, but like anything, the devil is in the details.First, we need a starting GIS file of some kind, which defines our coordinates (lat/longs) of the various pipelines. Next, we need a source of data describing the values we’re interested in displaying for each of the pipelines. Finally, we need to take that data we’re interested in viewing, create an overall scale for it (low to high), and then essentially transpose it with our GIS data.In terms of specifics, the diagram below shows the high-level technology stacks that make this possible. First, a GIS file is used to build a simulation. In my case this is typically PIPESIM, which has the benefits of a.) having built-in GIS support and b.) having a python API. The python API allows for information on the distances of each pipeline along with their coordinates to be extracted automatically. Next, I use the Wolfram Language’s geo-related functions to scale my simulation data along the actual GIS coordinates of a particular pipeline. Finally, the generated data is written into a kml file as plain text where it may be viewed by 3rd party software or loaded back in to the Wolfram Language.\n\n\n\n\n\n Looking ahead\n\n\n\n\n\n Numerous software (PIPESIM included) now have the ability to generate heat maps natively within their user interfaces. What’s unique about this technology is that the end result is a kml file. This allows the heat map to be opened by numerous 3rd party pieces of software such as Google Earth and Global Mapper and probably more importantly, it allows results to be shared easily across entire organizations.I have utilized this technology now on several projects and throughout that process have managed to bring it to a fairly mature state. It can be adapted to all kinds of data sources whether they be simulation / software generated, or actual field data and the GIS data can come from a number of sources as well."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Andrew Yule",
    "section": "",
    "text": "Wolfram Language\n\n\nStatistics\n\n\n\nFiveThirtyEight’s Riddler solution from 06/25/2021\n\n\n\nAndrew Yule\n\n\nJun 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWolfram Language\n\n\nStatistics\n\n\nSports\n\n\n\nFiveThirtyEight’s Riddler solution from 06/03/2021\n\n\n\nAndrew Yule\n\n\nJun 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnergy\n\n\nVisualization\n\n\nWolfram Language\n\n\nPython\n\n\n\nHow to improve insights into complicated onshore pipeline networks\n\n\n\nAndrew Yule\n\n\nOct 12, 2018\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "About.html",
    "href": "About.html",
    "title": "Andrew Yule",
    "section": "",
    "text": "Code\n\nggplot (for Wolfram Language): This is a Wolfram Language implementation of the popular R package called ggplot. It’s one of my favorite side projects, but unfortunately I don’t get as much time to work on it as I would like.\nwl2md: Converts a Mathematica notebook into a Markdown notebook. It’s essentially a re-write of the m2md package (link), as I wanted a little more control over the code base and implementation.\nandrew-yule: Repository for the majority of the content that makes up this website.\n\n\n\nPublications and Presentations\n\nPSIG 2021 Conference, A Novel Approach for Pump Timing Optimization\nEngineering Alex: A Centralized System for Petroleum Production Analytics\nggplot: A Grammar of Graphics for the Wolfram Language\nWolfram Language for Application Development: How to Take Full Advantage of NETLink`\nLessons Learned from Application Development with the Wolfram Language\n\n\n\nLinks\n\nLinkedIn\nTwitter\nGithub"
  }
]